#显示被匹配行的行号 - 可以用来直接定位住某行
grep -n -E "j.*" demofile/grep


#显示被匹配行的行数 - 类似wc
grep -c -E "j.*" demofile/grep

#忽略大小写 - 常用ignore 
grep -i "J" demofile/grep 

#-e多个匹配项（可以使用-f,一行一个匹配项写到文件里管理起来）
#数量太多的时候用文件管理起来会比较方便
grep -e 'j' -e 'h' demofile/grep

#显示文件
#经常会配合sed使用。 sed -i 's/xx/xxx/g' `grep xx * -rl`
#-r 表示在当前文件夹下递归查找
grep jinjing /etc/profile demofile/grep -l

#只在目录中所有的.php和.html文件中递归搜索字符"main()"
#有了这个就不用在进行grep -v 反向匹配了
grep "main()" . -r --include *.{php,html}

#在搜索结果中排除所有README文件
grep "main()" . -r --exclude "README"

#在搜索结果中排除filelist文件列表里的文件
grep "main()" . -r --exclude-from filelist

#显示匹配某个结果之后的3行，使用 -A 选项：
seq 10 | grep "5" -A 3
5
6
7
8

#显示匹配某个结果之前的3行，使用 -B 选项：
seq 10 | grep "5" -B 3
2
3
4
5

#显示匹配某个结果的前三行和后三行，使用 -C 选项：
seq 10 | grep "5" -C 3
2
3
4
5
6
7
8

#不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。
#这个比较厉害了
grep -q "test" filename

